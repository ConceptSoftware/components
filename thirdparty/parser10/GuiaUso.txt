// define a expressa a ser avaliada
DynaParser.Expression := Expressao

// acesso ao valor avaliado da expressao
DynaParser.Value

// seta o valor de uma variavel 
DynaParser.SetVariable('Counter2', StrToFloat(CountLabel.Caption));

// acesso ao valor da variavel; pode ser usado para atribuicao, mas
// e muito mais lento
DynaParser.Variable['Counter2']

----------- 

// Criando novas funcoes

// tipo da callback
procedure(AnOperation: POperation);

  // tipo da estrutura recebida
  TOperation = record
                 { MUST use pointers (!), because argument and destination are linked... }
                 Arg1, Arg2 : PParserFloat;  // valores passados como argumento
                 Dest : PParserFloat;	     // valor de retorno

                 NextOperation : POperation;

                 Operation: TMathProcedure;
                 Token : TToken;
               end;

// procedimentos para adicionar funcoes
procedure AddFunctionOneParam(const AFunctionName: string; const Func: TMathProcedure);
procedure AddFunctionTwoParam(const AFunctionName: string; const Func: TMathProcedure);


* Exemplo de Uso:

// define callback para realizar operacao
procedure SomaCallback(AnOperation: POperation);
begin

	AnOperation^.Dest^ = AnOperation^.Arg1^ + AnOperation^.Arg1^;

end;

...
// adiciona a nova funcao
AddFunctionOneParam('Soma', SomaCallBack);